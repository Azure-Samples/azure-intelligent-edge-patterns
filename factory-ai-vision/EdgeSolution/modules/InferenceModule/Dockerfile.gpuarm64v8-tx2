#FROM mcr.microsoft.com/azureml/onnxruntime:v0.5.0-tensorrt-l4t-r32.2

ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.3.1
FROM ${BASE_IMAGE} as onnxruntime

ARG WHEEL_FILE=onnxruntime_gpu_tensorrt-1.0.0-cp36-cp36m-linux_aarch64.whl
RUN echo "Building ONNX Runtime Docker image with ${WHEEL_FILE}..."

# Ensure apt-get won't prompt for selecting options
ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt install -y --no-install-recommends \
    	build-essential \
	software-properties-common \
	libopenblas-dev \
        libpython3.6-dev \
        python3-pip \
        python3-dev \
	cmake

RUN pip3 install --upgrade pip
RUN pip3 install setuptools
RUN pip3 install wheel pybind11 pytest

WORKDIR /app

# copy previously built wheel into the container
COPY ${WHEEL_FILE} .

RUN basename ${WHEEL_FILE} | xargs pip3 install 

ARG DEVICE


COPY requirements-tx2.txt ./
RUN apt-get -y install python3-opencv
RUN apt-get -y install libprotoc-dev protobuf-compiler
RUN pip install --upgrade pip
RUN pip install -U certifi --ignore-installed
RUN pip install -r requirements-tx2.txt --ignore-installed && \
    pip install flask 
#RUN pip install onnxruntime-gpu

COPY main.py ./
COPY object_detection.py ./
COPY object_detection2.py ./
COPy onnxruntime_predict.py ./
COPY utility.py ./
COPY default_model/cvexport.manifest default_model/
COPY default_model default_model/
COPY default_model_6parts default_model_6parts/
COPY sample_video sample_video/
RUN chmod 777 sample_video/video.mp4
RUN chmod 777 default_model
CMD [ "python3", "main.py" ]

